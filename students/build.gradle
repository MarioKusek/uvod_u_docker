plugins {
	id 'org.springframework.boot' version '2.2.2.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
    id 'com.bmuschko.docker-remote-api' version '6.1.1'
}

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage


group = 'hr.fer.docker'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

test {
	useJUnitPlatform()
}

springBoot {
    buildInfo()
}


// Docker tasks
task createDockerfile(type: Dockerfile) {
	dependsOn bootJar
  	from 'openjdk:11.0.5-jre-slim' 	
  	exposePort 8080
  	
  	addFile bootJar.outputs.files.singleFile.name, "/opt/app.jar" 
  	entryPoint "java", "-Djava.security.egd=file:/dev/./urandom", "-jar", "/opt/app.jar"
  	
  	doLast {
		ant.copy file: bootJar.outputs.files.singleFile, todir: "${destDir.get()}"
  	}
}

task buildImage(type: DockerBuildImage) {
	dependsOn createDockerfile
    images.add("${project.name}-gradle:${version}")
}

assemble.dependsOn buildImage

task myDebug() {
  	println "DEBUG"
  	
  	//println "${project.name}-gradle:${version}"
  	println createDockerfile.destDir.get()
  	
  	//createDockerfile.destDir.class.methods.each{ v -> println "${v.name} $v"}
  	//createDockerfile.destDir.properties.each{ key, value -> println "-- $key : $value" }
}


